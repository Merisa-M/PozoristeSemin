// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pozoriste;

namespace Pozoriste.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20220313102224_incijLN")]
    partial class incijLN
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Pozoriste.EntityModels.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnickiNalogID")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.HasIndex("KorisnickiNalogID");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            AdminID = 1,
                            Ime = "Admin",
                            KorisnickiNalogID = 1,
                            Prezime = "Admin"
                        });
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Glumac", b =>
                {
                    b.Property<int>("GlumacID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdresaSlike")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojUgovora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GlumacID");

                    b.ToTable("Glumac");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.GlumacPredstava", b =>
                {
                    b.Property<int>("GlumacPredstavaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("GlumacID")
                        .HasColumnType("int");

                    b.Property<int>("PredstavaID")
                        .HasColumnType("int");

                    b.HasKey("GlumacPredstavaID");

                    b.HasIndex("GlumacID");

                    b.HasIndex("PredstavaID");

                    b.ToTable("GlumacPredstava");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Grad", b =>
                {
                    b.Property<int>("GradID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradID");

                    b.ToTable("Grad");

                    b.HasData(
                        new
                        {
                            GradID = 1,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            GradID = 2,
                            Naziv = "Zagreb"
                        });
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Komentar", b =>
                {
                    b.Property<int>("KomentarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("KupacID")
                        .HasColumnType("int");

                    b.Property<bool>("Odobren")
                        .HasColumnType("bit");

                    b.Property<int>("PredstavaID")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VrijemeKreiranja")
                        .HasColumnType("datetime2");

                    b.HasKey("KomentarID");

                    b.HasIndex("KupacID");

                    b.HasIndex("PredstavaID");

                    b.ToTable("Komentar");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.KorisnickiNalog", b =>
                {
                    b.Property<int>("KorisnickiNalogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KorisnickiNalogID");

                    b.ToTable("KorisnickiNalog");

                    b.HasData(
                        new
                        {
                            KorisnickiNalogID = 1,
                            Password = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            KorisnickiNalogID = 2,
                            Password = "test",
                            Username = "test"
                        });
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Kupac", b =>
                {
                    b.Property<int>("KupacID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnickiNalogID")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KupacID");

                    b.HasIndex("GradID");

                    b.HasIndex("KorisnickiNalogID");

                    b.ToTable("Kupac");

                    b.HasData(
                        new
                        {
                            KupacID = 1,
                            BrojTelefona = "061-111-111",
                            Email = "prezime.ime@gmail.com",
                            GradID = 2,
                            Ime = "ImeKupca",
                            KorisnickiNalogID = 1,
                            Prezime = "PrezimeKupca"
                        });
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Novosti", b =>
                {
                    b.Property<int>("NovostiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("AdresaSlike")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumVrijemeObjave")
                        .HasColumnType("datetime2");

                    b.Property<string>("KratkiSadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NovostiID");

                    b.HasIndex("AdminID");

                    b.ToTable("Novosti");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Predstava", b =>
                {
                    b.Property<int>("PredstavaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProsjecnaOcjena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reziser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Trajanje")
                        .HasColumnType("int");

                    b.Property<int>("ZanrID")
                        .HasColumnType("int");

                    b.HasKey("PredstavaID");

                    b.HasIndex("ZanrID");

                    b.ToTable("Predstava");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.PredstavaKupac", b =>
                {
                    b.Property<int>("PredstavaKupacID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("KupacID")
                        .HasColumnType("int");

                    b.Property<decimal>("Ocjena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PredstavaID")
                        .HasColumnType("int");

                    b.HasKey("PredstavaKupacID");

                    b.HasIndex("KupacID");

                    b.HasIndex("PredstavaID");

                    b.ToTable("PredstavaKupac");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Prikazivanje", b =>
                {
                    b.Property<int>("PrikazivanjeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DatumPrikazivanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("PredstavaID")
                        .HasColumnType("int");

                    b.Property<int>("SalaID")
                        .HasColumnType("int");

                    b.HasKey("PrikazivanjeID");

                    b.HasIndex("PredstavaID");

                    b.HasIndex("SalaID");

                    b.ToTable("Prikazivanje");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DatumIsteka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumRezervacije")
                        .HasColumnType("datetime2");

                    b.Property<int>("KupacID")
                        .HasColumnType("int");

                    b.Property<bool>("Odobrena")
                        .HasColumnType("bit");

                    b.Property<int>("PrikazivanjeID")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaID");

                    b.HasIndex("KupacID");

                    b.HasIndex("PrikazivanjeID");

                    b.ToTable("Rezervacija");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Sala", b =>
                {
                    b.Property<int>("SalaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<bool>("Klimatizacija")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalaID");

                    b.ToTable("Sala");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Sjediste", b =>
                {
                    b.Property<int>("SjedisteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Kolona")
                        .HasColumnType("int");

                    b.Property<int>("Red")
                        .HasColumnType("int");

                    b.Property<int>("SalaID")
                        .HasColumnType("int");

                    b.HasKey("SjedisteID");

                    b.HasIndex("SalaID");

                    b.ToTable("Sjediste");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Ulaznica", b =>
                {
                    b.Property<int>("UlaznicaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("KupacID")
                        .HasColumnType("int");

                    b.Property<int>("PrikazivanjeID")
                        .HasColumnType("int");

                    b.Property<int>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("SjedisteID")
                        .HasColumnType("int");

                    b.HasKey("UlaznicaID");

                    b.HasIndex("KupacID");

                    b.HasIndex("PrikazivanjeID");

                    b.HasIndex("RezervacijaID");

                    b.HasIndex("SjedisteID");

                    b.ToTable("Ulaznica");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Zanr", b =>
                {
                    b.Property<int>("ZanrID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZanrID");

                    b.ToTable("Zanr");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Admin", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.KorisnickiNalog", "KorisnickiNalog")
                        .WithMany()
                        .HasForeignKey("KorisnickiNalogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KorisnickiNalog");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.GlumacPredstava", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.Glumac", "Glumac")
                        .WithMany()
                        .HasForeignKey("GlumacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pozoriste.EntityModels.Predstava", "Predstava")
                        .WithMany()
                        .HasForeignKey("PredstavaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Glumac");

                    b.Navigation("Predstava");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Komentar", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.Kupac", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pozoriste.EntityModels.Predstava", "Predstava")
                        .WithMany()
                        .HasForeignKey("PredstavaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kupac");

                    b.Navigation("Predstava");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Kupac", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pozoriste.EntityModels.KorisnickiNalog", "KorisnickiNalog")
                        .WithMany()
                        .HasForeignKey("KorisnickiNalogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("KorisnickiNalog");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Novosti", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Predstava", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.Zanr", "Zanr")
                        .WithMany()
                        .HasForeignKey("ZanrID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zanr");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.PredstavaKupac", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.Kupac", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pozoriste.EntityModels.Predstava", "Predstava")
                        .WithMany()
                        .HasForeignKey("PredstavaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kupac");

                    b.Navigation("Predstava");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Prikazivanje", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.Predstava", "Predstava")
                        .WithMany()
                        .HasForeignKey("PredstavaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pozoriste.EntityModels.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Predstava");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Rezervacija", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.Kupac", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pozoriste.EntityModels.Prikazivanje", "Prikazivanje")
                        .WithMany()
                        .HasForeignKey("PrikazivanjeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kupac");

                    b.Navigation("Prikazivanje");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Sjediste", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Pozoriste.EntityModels.Ulaznica", b =>
                {
                    b.HasOne("Pozoriste.EntityModels.Kupac", "Kupac")
                        .WithMany()
                        .HasForeignKey("KupacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pozoriste.EntityModels.Prikazivanje", "Prikazivanje")
                        .WithMany()
                        .HasForeignKey("PrikazivanjeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pozoriste.EntityModels.Rezervacija", "Rezervacija")
                        .WithMany()
                        .HasForeignKey("RezervacijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pozoriste.EntityModels.Sjediste", "Sjediste")
                        .WithMany()
                        .HasForeignKey("SjedisteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kupac");

                    b.Navigation("Prikazivanje");

                    b.Navigation("Rezervacija");

                    b.Navigation("Sjediste");
                });
#pragma warning restore 612, 618
        }
    }
}
